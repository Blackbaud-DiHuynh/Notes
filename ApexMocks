APEXMOCKS


Links:
  Setup in dev orgs: 
    http://jessealtman.com/2014/06/apexmocks-setup/

  Running ApexMocks generator:
    https://code4cloud.wordpress.com/2014/06/27/new-improved-apex-mocks-generator/

  Dependencies in Unit Test:
    https://code4cloud.wordpress.com/2014/05/15/stubbing-dependencies-in-a-unit-test/ 
  
  Tutorials/examples: 
    http://jessealtman.com/2014/06/real-unit-tests-using-apexmocks/ 
  
  Github repo:
    https://github.com/financialforcedev/fflib-apex-mocks

About: 
  based on Mockjito
 
Dependency Injection
  allows programs to be loosely coupled
  3 forms: setter-, interface-, and constructor-based

  Advantages: 
    can be used in legacy code for refactoring
    easier to unit test
    allows a client to remove all concrete implementation that it needs to use
    can be used to externalize a system's configuration details into configuration allowing the system to be reconfigured wi/o recompilation
    reduction of boilerplate code
    concurrent/independent development
    decreases coupling
  
  Disadvantages:
    makes code hard to read since it separates behavior from construction
    diminishes encapsulation by requiring users of a system to know how it work and not merely what task or job it performs. 

Focuses for us:
  reduce DML operations in unit tests

ApexMocks features:
  verify method was called with the correct arguments
  verify a method was called n number of times
  verify a method was never called
  stub a method call with a particular set of arguments to return a particular value
  stub a method call with a particular set of arguments to throw a particular exception

apex-mock-generator
  generates mock implementation automatically

Questions to answer: 
  How should we approach incorporating ApexMocks into your existing unit tests? 
    - new unit tests should use ApexMocks
    - how to convert the old ones? 
      - by code coverage? 
      - by runtime?
      - difficult since some of our code are not unit testable
  
  How are we going to organize mock classes? 
  Code convention
    - given, when, then: good practice for Spock tests in LO, cucumber, and unit testing in general
    - mocks.startStubbing(); mocks.stopStubbing()
    - Test.startTest(), Test.stopTest()
    - method names
  this interface business
  Trigger tests should still have DML operations
  

Tips: 
  refactor all SOQL queries to their own method, makes it easier to stub
  use CampaignTestUtils.getDefaultCampaign()
  use fflib_IDGenerator.generate(Contact.SObjectType)
  


STEPS TO STUBBING OUT SOMETHING
  - check Mocks.cls to see if the class you're mocking already exists

